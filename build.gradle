import com.modrinth.minotaur.TaskModrinthUpload
import com.modrinth.minotaur.request.VersionType

plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
    id 'maven-publish'
    id "com.modrinth.minotaur" version "1.2.1"
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

group = project.group + "." + project.mod_id
archivesBaseName = project.mod_file_name + '-mc' + project.minecraft_version_out
version = project.mod_version
if (project.mod_version_detail != "build.undefined") {
    version += "+${project.mod_version_detail}"
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    maven {
        url 'https://api.modrinth.com/maven'
    }
    maven {
        url 'https://masa.dy.fi/maven'
    }
    maven {
        url 'https://www.cursemaven.com/'
    }
    maven {
        url 'https://www.jitpack.io'
    }
}

dependencies {
    // Development Environment
    minecraft("com.mojang:minecraft:${project.minecraft_version}")
    mappings(loom.officialMojangMappings())
    modApi("net.fabricmc:fabric-loader:${project.fabric_loader_version}")
    // Required library
    modApi("com.github.Hendrix-Shen:MagicLib:${project.library_magiclib_version}")
    include("com.github.Hendrix-Shen:MagicLib:${project.library_magiclib_version}")
    modApi("fi.dy.masa.malilib:malilib-fabric-${project.minecraft_version_masa}:${project.library_malilib_version}")
    // Optional mod compatibility library
    modCompileOnly("curse.maven:authme-356643:${project.library_authme_version}")
    modCompileOnly("curse.maven:inGameAcountSwitcher-232676:${project.library_inGameAcountSwitcher_version}")
    modCompileOnly("curse.maven:litematica-308892:${project.library_litematica_version}")
    modCompileOnly("curse.maven:reauth-403928:${project.library_reauth_version}")
    modCompileOnly("maven.modrinth:modmenu:${project.library_mod_menu_version}")
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    options.encoding = 'UTF-8'
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        include "fabric.mod.json"
        expand "mod_version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
}

task publishModrinth (type: TaskModrinthUpload) {
    onlyIf {
        System.getenv("MODRINTH_API_TOKEN")
    }
    token = System.getenv("MODRINTH_API_TOKEN")
    projectId = "${project.modrinth_project_id}"
    versionNumber = System.getenv("VERSION_NUMBER")
    changelog = System.getenv("CHANGE_LOG")
    uploadFile = remapJar
    switch ("${project.modrinth_release_type}") {
        case "alpha":
            versionType = VersionType.ALPHA
            break
        case "beta":
            versionType = VersionType.BETA
            break
        case "release":
            versionType = VersionType.RELEASE
            break
    }
    addGameVersion("${project.minecraft_version}")
    addLoader('fabric')
}

runClient {
    defaultCharacterEncoding = "UTF-8"
}

runServer {
    defaultCharacterEncoding = "UTF-8"
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from "LICENSE"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
        maven {
            url "$projectDir/publish"
        }
    }
}